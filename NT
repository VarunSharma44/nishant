#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node* link;
};
struct node* head=NULL;
void insert_at_beginning(int);
void insert_at_last(int);
void insert_at_position(int,int);
void display();
void delete_at_beginning();
void delete_at_end();
void delete_at_position(int);
void search_update(int ,int);
void isprime(int);
void main ()
{
    int choice,choice1,value,pos,pos2,s,u,n;
    while(1){
   MainMenu: printf("\nEnter a valid choice to perform following operation:\n");
    printf(" 1.Insertion:\n 2.Deletion:\n 3.display:\n 4.Exit;\n 5.Search and update:\n 6.isprime:\n");
    scanf("%d",&choice);
        switch(choice)
        {
        case 1: printf("Enter the number to be insert:\n");
        scanf("%d",&value);
        while(1){
           printf("where you want to insert :\n1.At beginning:\n2.At the end:\n3.At any position:\n");
           scanf("%d",&choice1);
           switch(choice1)
           {
           case 1:
            insert_at_beginning(value);
            break;

           case 2:
            insert_at_last(value);
            break;

           case 3:printf("Enter the position where you want to insert:\n");
           scanf("%d",&pos);
            insert_at_position(value,pos);
            break;

            default:printf("Please enter a valid choice:");
            goto MainMenu;
           }
           goto SubMenuEnd;
        }
        SubMenuEnd:
            break;
           case 3:
            display();
            break;
           case 2:
            printf("Where you want to delete:\n1.Beginning:\n2.last:\n3.At any position:\n");
            scanf("%d",&choice1);
            switch(choice1)
            {
                case 1: 	delete_at_beginning();
				break;
		   case 2: 	delete_at_end();
				break;
		   case 3:      printf("Enter the position where you want delete: ");
				scanf("%d",&pos2);
				delete_at_position(pos2);
				break;

		   default: 	printf("please enter a valid choice:");
				goto MainMenu;
		}
		break;
           case 4:
            exit(0);

           case 5:
           printf("enter the search value:\n");scanf("%d",&s);
           printf("Enter the updated value:\n");
           scanf("%d",&u);
            search_update(s,u);
            break;
        case 6:
           printf("Enter a number:\n");
           scanf("%d",&n);
           isprime(n);
           break;
 
            default:printf("please enter a valid choice:");
            break;
        }
    }
}
void insert_at_beginning(int data)
{
    struct node* p;
    p=(struct node*) malloc(sizeof(struct node));
    p->data=data;
    p->link=head;
    head=p;
    printf("One node is inserted:\n");
}
void insert_at_last(int data)
{
    struct node* q;
    q=(struct node*) malloc(sizeof(struct node));
    q->data=data;
    q->link=NULL;
    struct node*temp=head;
    while(temp->link!=NULL)
    {
        temp=temp->link;
    }
    temp->link=q;
    printf("one node is inserted:");
}
void insert_at_position(int data,int pos)
{
    struct node* p;
    p=(struct node*) malloc(sizeof(struct node));
    p->data=data;
    p->link=head;
    head=p;
    struct node* temp=head;
    for(int i=2;i<pos;i++)
    {
        temp=temp->link;
    }
    p->link=temp->link;
    temp->link=p;

}
void delete_at_beginning()
{
    struct node* temp=head;
    if(temp==NULL)
        printf(" No node to delete:");
   else
    {
        temp=temp->link;
        head=temp;
        printf("Node is deleted:");
    }
}
void delete_at_end()
{
    struct node* temp=head;
    if (temp==NULL)
        printf("No node to deleted:");
    else
    {
        while(temp->link->link!=NULL)
        {
            temp=temp->link;
        }
        temp->link=NULL;
        printf("One node is deleted:");
    }
}
void delete_at_position(int pos)
{
    struct node* temp=head;
    struct node* ptr;
    if(temp==NULL)
    {
        printf("No node to be deleted:");
    }
    else
    {
        for(int i=2;i<pos;i++)
            temp=temp->link;
        ptr=temp->link;
        temp->link=ptr->link;
    }
}
void display()
{
    struct node*temp=head;
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->link;
    }
}
void search_update(int data,int updated_no)
{
    struct node* temp;
    temp=head;
    temp->data=updated_no;
    }
void isprime(int n)
{
    if(n>2)
    return ;
    for(int i=2;i<=n/2;i++)
    {
        if(n%i!=0)
        insert_at_position(n,3);
    }
}
#include <stdio.h>

// Function to print the array
void printArray(int arr[], int size) {
    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to insert an element at a specified position
void insertElement(int arr[], int size, int element, int position) {
    if (position < 1 || position > size + 1) {
        printf("Invalid position for insertion\n");
        return;
    }

    for (int i = size - 1; i >= position - 1; i--) {
        arr[i + 1] = arr[i];
    }

    arr[position - 1] = element;
    printf("Element %d inserted at position %d\n", element, position);
}

// Function to delete an element from the array
void deleteElement(int arr[], int size, int element) {
    int found = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] == element) {
            for (int j = i; j < size - 1; j++) {
                arr[j] = arr[j + 1];
            }
            found = 1;
            size--;
            break;
        }
    }

    if (found) {
        printf("Element %d deleted from the array\n", element);
    } else {
        printf("Element %d not found in the array\n", element);
    }
}

// Function to search and update an element in the array
void searchAndUpdate(int arr[], int size, int target, int update) {
    int found = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] == target) {
            arr[i] = update;
            found = 1;
            break;
        }
    }

    if (found) {
        printf("Element %d found and updated with %d\n", target, update);
    } else {
        printf("Element %d not found in the array\n", target);
    }
}

int main() {
    int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    // Traversal: print the array
    printArray(arr, 10);

    // Insertion: insert 99 at position 4
    insertElement(arr, 10, 99, 4);
    printArray(arr, 11);

    // Deletion: delete element 6
    deleteElement(arr, 11, 6);
    printArray(arr, 10);

    // Search and Update: search for 8 and update with 66
    searchAndUpdate(arr, 10, 8, 66);
    printArray(arr, 10);
    return o;
    }



#include <stdio.h>
#include <stdlib.h>

int main() {
    int n;

    // Get the number of elements from the user
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    // Dynamically allocate memory for the array
    int arr = (int)malloc(n * sizeof(int));

    // Check if memory allocation is successful
    if (arr == NULL) {
        printf("Memory allocation failed.\n");
        return 1; // Exit with an error code
    }

    // Input numbers from the user
    printf("Enter %d numbers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Calculate the sum of numbers
 int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    // Print the sum
    printf("Sum of the numbers: %d\n", sum);

    // Free the dynamically allocated memory
    free(arr);

    return 0;
}


#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node* prev;
struct node* next;
};
void display();
void iatb(int);
void iatl(int);
void iatp(int ,int);
int pal(int);
struct node* head=NULL;
void main ()
{
    int value,choice,pos;
    do{
            printf("\n Menu :\n");
        printf("1.Insertion at begining.\n");
        printf("2.Insertion at last.\n");
        printf("3.Insertion at position\n");
        printf("4.Check palindrome or insert\n");
        printf("3.Display.\n");
        printf("0.Exit.\n");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
            printf("Enter the  inserted value :\n");
        scanf("%d",&value);
        iatb(value);
        break;
            case 2:
                printf("Enter the  inserted value :\n");
        scanf("%d",&value);
        iatl(value);
        break;
            case 3:
                printf("Enter the  inserted value :\n");
        scanf("%d",&value);
        printf("Enter the  position where you want to insert a value:\n");
        scanf("%d",&pos);
        iatp(value,pos);
        break;
            case 4:
                printf("Enter the  inserted value :\n");
        scanf("%d",&value);
        pal(value);
        break;
            case 5:
                display();
                break;

            case 0:
                printf("Exiting the program.\n ");
                break;
            default:
                printf("please enter a valid choice.\n");
        }
        }
        while(choice!=0);
          }
void iatb(int data)
{
    struct node* p;
    p=(struct node*)malloc(sizeof(struct node));
    p->data=data;
    p->prev=NULL;
    p->next=NULL;
    if(head==NULL){
    head=p;
    printf("One node is inserted:\n");
    }
    else {
        head->prev=p;
        p->next=head;
        head=p;
        printf("One node is inserted:\n");
    }
}
void display()
{
    struct node* temp=head;
    while(temp!=NULL)
    {
        printf("%d ",temp->data);
        temp=temp->next;
    }
}
void iatl(int data)
{
     struct node* q;
    q=(struct node*)malloc(sizeof(struct node));
    q->data=data;
    q->next=NULL;
    struct node* p;
    p=head;
    while(p->next!=NULL)
    {
        p=p->next;
    }
    p->next=q;
    q->prev=p;
}
void iatp(int data,int pos)
{
    struct node* q;
    q=(struct node*)malloc(sizeof(struct node));
    q->data=data;
    q->prev=NULL;
    q->next=NULL;
    struct node* p=head;;
    for(int i=2;i<pos;i++)
        p=p->next;

    p->next->prev=q;
    q->next=p->next;
    p->next=q;
    q->prev=p;
}
int pal(int num)
{
    int original_num=num;
    int r,flag;
    if(num<11){
            flag=2;
        printf("%d is not a palindrome no :\n",num);
    printf("please enter a another no: click 4\n");
    return 0;
    }
    else{
    while(num>0){
            r=r*10;
            r=r+num%10;
            num=num/10;
    }
    }
    if(r==original_num){
        flag=1;
            printf("%d is a palindrome no:",num);
            int pos;
       printf("\npls enter position where you want to insert this number:\n");
    scanf("%d",&pos);
    iatp(original_num,pos);
}
else if(flag!=1)
{
printf("%d is not a palindrome no :\n",original_num);
    printf("please enter a another no: click 4\n");
}
}
